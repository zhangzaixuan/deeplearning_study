import numpy as np

# 向量/矢量其实是多维平面或者说坐标系的量化指标，只是一维到三维的向量比较直观容易想象，本质上维度和度量值的概念是一样的
"""
[1,2,3] (1,3) 行向量 1 代表维度，3 代表元素个数
[1,
2,
3]
上面为[3,1] 列向量 元素个数为n,维度为1
行向量（1，n）,列向量（n,1）,本质都为m*n向量退行化的基础向量
"""
"""
关于向量的线性运算（加减乘除），都要求向量的维度
"""
a = np.array([1, 2, 3]).reshape(-1, 1)
print(a.shape)
print(a)
b = np.array([4, 5, 6]).reshape(-1, 1)
print(a + b, a - b, a * b, a / b)

"""
此处特别澄清几个概念，向量倍乘，点乘，叉乘

点乘，内积，标量积/数量积 dot/scalar product

代数定义 a (x1,y1,z1) b (x2,y2,z2)
a·b=x1*x2+y1*y2+z1*z2,算出来是个标量值，而不是矢量
几何上，a向量在b向量方向上的倍乘投影
a·b=|a|·｜b｜cosx,x为a,b矢量夹角，点乘可以表征两个向量直接的空间相似度

叉乘，向量积，外积 across/vector product 

代数定义 a (x1,y1,z1) b (x2,y2,z2)
a x b=(y1z2-z1y2,z1x2-z2x1,x1y2-y1x2)
几何上
a x b=a|·｜b｜sinx·n,n为x,y向量所构成平面的单位向量，结果其实是a,b向量的一个法向量，遵从右手定则

倍乘向量为向量的元素值倍乘，代数2*a (2x1,2y1,2y2),几何上，原向量方向不变，度量倍乘

"""